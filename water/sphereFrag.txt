#version 330 core
out vec4 FragColor;
in vec3 WorldPos;
in vec3 frag_normal;
in vec2 frag_uv;

uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D metallicMap;
uniform sampler2D roughnessMap;
uniform sampler2D aoMap;

uniform vec3 lightPosition;
uniform vec3 lightColor;
uniform vec3 camPos;
uniform int ID;

const float PI = 3.14159265359;

uniform struct render_spheres {
  vec3 sphere_pos[100];
  float sphere_Radius[100];
  int size;
} spheres;

vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalMap, frag_uv).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(frag_uv);
    vec2 st2 = dFdy(frag_uv);

    vec3 N   = normalize(frag_normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float calShadow(vec3 s_pos, float radius, vec3 lightDir){
	float t = -1.0f;
	float result = 0.0f;
	vec3 sphere_curpoint = WorldPos - s_pos;
	float a = dot(lightDir, lightDir);
	float b = 2.0f * dot(sphere_curpoint, lightDir);
	float c = dot(sphere_curpoint, sphere_curpoint) - radius * radius;
	float discriminant = b*b - 4*a*c;
	if(discriminant >= 0) {
		t = (-b - sqrt(discriminant)) / (2.0f * a);
		if(t < 0) t = (-b + sqrt(discriminant)) / (2.0f * a);
		if(t < 0) return 0.0f;
		result = 1.0f;
	}
	return result;
}

void main()
{		
	vec3 albedo     = pow(texture(albedoMap, frag_uv).rgb, vec3(2.2));
	//vec3 normal     = getNormalFromMap();
	float metallic  = texture(metallicMap, frag_uv).r;
	float roughness = texture(roughnessMap, frag_uv).r;
	float ao = texture(aoMap, frag_uv).r;

	vec3 N = getNormalFromMap();
    vec3 V = normalize(camPos - WorldPos);

	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

	vec3 L = normalize(lightPosition);
    vec3 H = normalize(V + L);
    vec3 radiance = vec3(5);

    // Cook-Torrance BRDF
    float NDF = DistributionGGX(N, H, roughness);   
    float G   = GeometrySmith(N, V, L, roughness);      
    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
           
    vec3 nominator    = NDF * G * F; 
    float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; // 0.001 to prevent divide by zero.
    vec3 specular = nominator / denominator;
        
    // kS is equal to Fresnel
    vec3 kS = F;
    // for energy conservation, the diffuse and specular light can't
    // be above 1.0 (unless the surface emits light); to preserve this
    // relationship the diffuse component (kD) should equal 1.0 - kS.
    vec3 kD = vec3(1.0) - kS;
    // multiply kD by the inverse metalness such that only non-metals 
    // have diffuse lighting, or a linear blend if partly metal (pure metals
    // have no diffuse light).
    kD *= 1.0 - metallic;	  

    // scale light by NdotL
    float NdotL = max(dot(N, L), 0.0); 
	vec3 color = (kD * albedo / PI + specular) * radiance * NdotL;

	vec3 ambient = vec3(1) * albedo * ao;
	//color += ambient;

	float weDontHaveShadow = 1.0f;
	
	for(int i = 0; i < spheres.size; ++i) {
		if(i == ID) continue;
		float inShadow = 0;
		inShadow = calShadow(spheres.sphere_pos[i], spheres.sphere_Radius[i], L);
		if(inShadow > 0) {
			weDontHaveShadow = 0;
		}
	}
	
	color = weDontHaveShadow * color + ambient;

	color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);

	//FragColor = vec4(vec3(gl_FragCoord.z), 1.0);
}