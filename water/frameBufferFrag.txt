#version 330 core
out vec4 FragColor;
in vec2 frag_textCoor;
uniform sampler2D texture0;
uniform sampler2D depthBuffer;

uniform vec3 camPos;
uniform vec3 camFront;
uniform float aspect_ratio;
uniform vec3 lightPos;
uniform float distance;
uniform float blured;
uniform float blur_density;
float time = 1;

float offset = 1.0 / blur_density;  

vec2 offsets[25] = vec2[](
        vec2(-2*offset,  2*offset), 
        vec2( -offset,    2*offset), 
		vec2( 0,    2*offset), 
		vec2( offset,    2*offset), 
		vec2( 2*offset,    2*offset), 

		vec2(-2*offset,  offset), 
        vec2( -offset,    offset), 
		vec2( 0,    offset), 
		vec2( offset,    offset), 
		vec2( 2*offset,    offset),

		vec2(-2*offset,  0), 
        vec2( -offset,    0), 
		vec2( 0,    0), 
		vec2( offset,    0), 
		vec2( 2*offset,    0),

		vec2(-2*offset,  -offset), 
        vec2( -offset,    -offset), 
		vec2( 0,    -offset), 
		vec2( offset,    -offset), 
		vec2( 2*offset,    -offset),

		vec2(-2*offset,  -2*offset), 
        vec2( -offset,    -2*offset), 
		vec2( 0,    -2*offset), 
		vec2( offset,    -2*offset), 
		vec2( 2*offset,    -2*offset)
    );

void main() { 
    FragColor = texture(texture0, frag_textCoor);

	float a = texture2D(depthBuffer, frag_textCoor).x;
	float b = 2.0 * a - 1.0;
    float c = 2.0 * 1 * 400 / (400 + 1 - b * (400 - 1));
	c = min(c / distance, 1.0f);
	//FragColor = vec4(vec3(FragColor) * (1 - c) + c * vec3(1,1,0.8), 1.0);

	if(blured > 0) {
		vec3 sampleTex[25];
		for(int i = 0; i < 25; i++) {
			sampleTex[i] = vec3(texture(texture0, frag_textCoor + offsets[i]));
		}
		float kernel[25] = float[](
			1, 4, 7, 4, 1,
			4, 16, 26, 16, 4,
			7, 26, 41, 26, 7,
			4, 16, 26, 16, 4,
			1, 4, 7, 4, 1
		);
		for(int i = 0; i < 25; i++) kernel[i] /= 273.0;
		vec3 col = vec3(0.0);
		for(int i = 0; i < 25; i++) col += sampleTex[i] * kernel[i];
		FragColor = vec4(col, 1.0);
	}

	FragColor = vec4(vec3(FragColor) * (1 - c) + c * vec3(1,1,0.8), 1.0);
}