#version 330 core
out vec4 FragColor;
in vec2 frag_textCoor;
uniform sampler2D texture0;
uniform sampler2D depthBuffer;

uniform vec3 camPos;
uniform vec3 camFront;
uniform float aspect_ratio;
uniform vec3 lightPos;
uniform float distance;

float tri(float x){return abs(fract(x)-0.5);}
vec3 tri3(vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.0)), tri(p.y+tri(p.x*1.0)));}
float time = 1;

float triNoise3d(vec3 p, float spd) {
    float z=1.4;
	float rz = 0.0;
    vec3 bp = p;
	for (float i=0.0; i<=3.0; i++ )
	{
        vec3 dg = tri3(bp*2.0);
        p += (dg+time*spd);

        bp *= 1.8;
		z *= 1.5;
		p *= 1.2;
        //p.xz*= m2;
        
        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;
        bp += 0.14;
	}
	return rz;
}

float fogMap(vec3 p, float d){
	p.x += time*1.5;
    p.z += sin(p.x*.5);
    return triNoise3d(p*2.2/(d+20.0),0.2)*(1.0-smoothstep(0.0,0.7,p.y));
}

void main() { 
    FragColor = texture(texture0, frag_textCoor);
	//float average = (FragColor.r + FragColor.g + FragColor.b) / 3.0f;
    //FragColor = vec4(average, average, average, 1.0);

	float a = texture2D(depthBuffer, frag_textCoor).x;
	float b = 2.0 * a - 1.0;
    float c = 2.0 * 1 * 400 / (400 + 1 - b * (400 - 1));
	c = min(c / distance, 1.0f);
	FragColor = vec4(vec3(FragColor) * (1 - c) + c * vec3(1,1,0.8), 1.0);

	/*
	vec3 rayStart = camPos;
	float vertical_fov = 0.5 - frag_textCoor.y;
	float horizontal_fov = frag_textCoor.x - 0.5;
	vec3 camF = normalize(camFront);
	vec3 camHorizontal = normalize(cross(camF, vec3(0,1,0)));
	vec3 camRealUp = normalize(cross(camF, camHorizontal));
	mat4 rotateMat = rotationMatrix(camRealUp, horizontal_fov * 45.0f * aspect_ratio) * rotationMatrix(camHorizontal, vertical_fov * 45.0f);
	vec3 rayDir = normalize(vec3(rotateMat * vec4(camF, 0)));
	float rayDistance = c;
	vec3 q = rayStart - lightPos;
	b = dot(rayDir, q);
	c = dot(q,q);
	float s = 1.0f / sqrt(c - b*b);
	float x = s * rayDistance;
	float y = s * b;
	float density = s * atan((x) / (1.0 + (x + y) * y));
	FragColor = vec4(vec3(FragColor) * (1 - density) + density * vec3(1,1,0.8), 1.0);
	*/

	/*
	vec3 rayStart = camPos;
	float vertical_fov = 0.5 - frag_textCoor.y;
	float horizontal_fov = frag_textCoor.x - 0.5;
	vec3 camF = normalize(camFront);
	vec3 camHorizontal = normalize(cross(camF, vec3(0,1,0)));
	vec3 camRealUp = normalize(cross(camF, camHorizontal));
	vec3 pos = c * camF + camPos + c * camHorizontal * horizontal_fov + c * camRealUp * vertical_fov;
	float rz = fogMap(pos, 0.5);
	float grd =  clamp((rz - fogMap(pos+0.8-float(0)*0.1,0.5))*3.0, 0.1, 1.0 );
    vec3 col2 = (vec3(0.1,0.8,0.5)*0.5 + 0.5*vec3(0.5, 0.8, 1.0)*(1.7-grd))*0.55;
	FragColor = mix(FragColor,vec4(col2,1.0),clamp(rz*smoothstep(0.5-0.4,0.5+2.+0.5*.75,c),0.0,1.0) );
	*/
	//FragColor = vec4(vec3(FragColor) * (1 - c) + c * vec3(1,1,0.8), 1.0);
}