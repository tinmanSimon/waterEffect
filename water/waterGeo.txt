#version 330 core
layout (points) in;
layout (line_strip, max_vertices = 2) out;
in GEO_IN {
	vec3 wNormal;
	vec3 WorldP; 
    mat4 model;
	mat4 view;
	mat4 projection;
} geo_in[];
out GEO_OUT {
  vec3 wNormal;
  vec3 WorldP;
} geo_out;


vec3 GetNormal() {
   vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);
   vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);
   vec3 result =  normalize(cross(a, b));
   if(result.y < 0) result = vec3(0,0,0) - result;
   return result;
}  

void main()
{
	//geo_out.wNormal = GetNormal();
    vec3 pos = geo_in[0].WorldP;
    vec3 normal = geo_in[0].wNormal;
    vec3 anotherPos = pos + normal;
    mat4 view = geo_in[0].view;
    mat4 projection = geo_in[0].projection;

	//geo_out.WorldP = geo_in[0].WorldP;
	//gl_Position = projection * view * vec4(pos, 1.0f);
    gl_Position = gl_in[0].gl_Position + vec4(-0.1, 0.0, 0.0, 0.0); 
    EmitVertex();
	//geo_out.WorldP = geo_in[1].WorldP;
	//gl_Position = projection * view * vec4(anotherPos, 1.0f);
    gl_Position = gl_in[0].gl_Position + vec4(0.1, 0.0, 0.0, 0.0); 
    EmitVertex();
	//geo_out.WorldP = geo_in[2].WorldP;
	//gl_Position = gl_in[2].gl_Position;
    //EmitVertex();
    EndPrimitive();
}